"""empty message

Revision ID: eba9ac11a8e8
Revises: d46cb4533423
Create Date: 2023-08-28 13:11:55.781722

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import insert, table, column, select, update


# revision identifiers, used by Alembic.
revision = 'eba9ac11a8e8'
down_revision = 'd46cb4533423'
branch_labels = None
depends_on = None

avatar = table('avatars',
    column('path', sa.String),
    column('condition_type', sa.String),
    column('condition_value', sa.String)
)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('avatars',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=True),
    sa.Column('condition_type', sa.Text(), nullable=True),
    sa.Column('condition_value', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_avatars'))
    )
    op.create_table('user_avatar',
    sa.Column('avatar_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['avatar_id'], ['avatars.id'], name=op.f('fk_user_avatar_avatar_id_avatars')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_avatar_user_id_users')),
    sa.PrimaryKeyConstraint('avatar_id', 'user_id', name=op.f('pk_user_avatar'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('avatar', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_users_avatar_avatars'), 'avatars', ['avatar'], ['id'])

    users_avatars = table('user_avatar',
        column('avatar_id'),
        column('user_id')
    )

    users = table('users',
        column('id'),
        column('avatar')
    )

    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    data = {
        "path": "basic.jpg",
        "condition_type": "free",
        "condition_value": None
    }
    ret = session.execute(insert(avatar).values(data))
    idAvatar = 1

    idAvatars = [idAvatar]
    lastrowid = 1
    for i in [1, 4, 5, 7, 10, 11]:
        data = {
            "path": f'design{i}.png',
            "condition_type": "free",
            "condition_value": None
        }
        ret = session.execute(insert(avatar).values(data))
        lastrowid = lastrowid + 1
        idAvatars.append(lastrowid)

    for i in [2, 6, 8, 9, 12, 13]:
            data = {
                "path": f'design{i}.png',
                "condition_type": "lock",
                "condition_value": None
            }
            ret = session.execute(insert(avatar).values(data))

    for u in session.execute(select(users)):
        for idA in idAvatars:
            dataAvatar = {
                "avatar_id": idA,
                "user_id": u[0]
            }

            session.execute(insert(users_avatars).values(dataAvatar))
        session.execute(update(users).where(users.c.id == u[0]).values(avatar = idAvatar))
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_users_avatar_avatars'), type_='foreignkey')
        batch_op.drop_column('avatar')

    op.drop_table('user_avatar')
    op.drop_table('avatars')
    # ### end Alembic commands ###
